// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	//// Replace this comment with your code.
    // 0x6000 = 0b110000000000000
    // if address[14] == 1 and address[13] == 1, then it is keyboard
    And(a=address[14], b=address[13], out=keyboardSelect);
    Not(in=address[13], out=temp);
    // 0x4000 = 0b100000000000000
    // if addr[14] == 1 and not addr[13] == 1 then it is screen
    And(a=address[14], b=temp, out=screenSelect);
    // if addr[14] == 0 then it must be Ram16
    Not(in=address[14], out=ramSelect);
    

    And(a=load, b=ramSelect, out=ramLoad);
    RAM16K(in=in, load=ramLoad, address=address[0..13], out=ramOut);

    And(a=load, b=screenSelect, out=screenLoad);
    Screen(in=in, load=screenLoad, address=address[0..12], out=screenOut);

    Keyboard(out=keyboardOut);

    Mux16(a=ramOut, b=screenOut, sel=screenSelect, out=ramOrScreenOut);
    Mux16(a=ramOrScreenOut, b=keyboardOut, sel=keyboardSelect, out=out);
}